stages:
  - build
  - build-ci
  - test
  - release

cache: []

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  IMAGE_CI_TAG: $CI_REGISTRY_IMAGE/ci:$CI_COMMIT_REF_SLUG
  IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:latest

.cache-pip: &cache-pip
  paths:
    - .pip-cache
    - .tox

# regexp rule for semver tags
# https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
.semver-tag-rule:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'

before_script:
  - source /etc/profile
  - source $HOME/.bash_profile

.docker-base: &docker-base
  image: docker
  services:
    - docker:dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"
  after_script:
    - docker logout "$CI_REGISTRY"
  variables:
    GIT_SUBMODULE_STRATEGY: none

# Docker build

Build image:
  <<: *docker-base
  stage: build
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_RELEASE_TAG" --tag "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"

# Docker CI build

Build CI image:
  <<: *docker-base
  stage: build-ci
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_CI_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_RELEASE_TAG" --cache-from "$IMAGE_CI_TAG" --tag "$IMAGE_CI_TAG" --build-arg INNOCONV_IMAGE="$IMAGE_TAG" -f Dockerfile.ci .
    - docker push "$IMAGE_CI_TAG"

# tox jobs

Python 3.10 unit tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py310-unit
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)/'
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py310"

Python 3.10 integration tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py310-integration
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py310"
    policy: pull

Python 3.9 unit tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py39-unit
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)/'
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py39"

Python 3.9 integration tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py39-integration
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py39"
    policy: pull

Python 3.8 unit tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py38-unit
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)/'
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py38"

Python 3.8 integration tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py38-integration
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py38"
    policy: pull

Python 3.7 unit tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py37-unit
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)/'
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py37"

Python 3.7 integration tests:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e py37-integration
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py37"
    policy: pull

Linting:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e linters
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py310"
    policy: pull

Documentation:
  stage: test
  image: $IMAGE_CI_TAG
  script: tox -e docs
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py310"
    policy: pull

# Docker release

Push main image:
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker tag "$IMAGE_TAG" "$IMAGE_RELEASE_TAG"
    - docker push "$IMAGE_RELEASE_TAG"
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
  only:
    - main

Push semver tag image:
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - echo "$DOCKER_HUB_PWD" | docker login --username "$DOCKER_HUB_USER" --password-stdin "$DOCKER_HUB_REGISTRY"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker logout "$DOCKER_HUB_REGISTRY"
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
  rules:
    - !reference [.semver-tag-rule, rules]

# GitLab release page

GitLab release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "release job"
  release:
    tag_name: $CI_COMMIT_TAG
    description: "Release $CI_COMMIT_TAG"
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
  rules:
    - !reference [.semver-tag-rule, rules]

# PyPI version release

Upload to PyPI:
  stage: release
  image: $IMAGE_CI_TAG
  script:
    - tox -e release
  variables:
    TWINE_USERNAME: $PYPI_USERNAME
    TWINE_PASSWORD: $PYPI_PASSWORD
    GIT_SUBMODULE_STRATEGY: none
  rules:
    - !reference [.semver-tag-rule, rules]
  cache:
    <<: *cache-pip
    key: "${CI_PROJECT_ID}-py310"
    policy: pull
