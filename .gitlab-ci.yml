image: $CI_REGISTRY_IMAGE/ci

stages:
  - build
  - test
  - release

cache: &cache
  key: "${CI_PROJECT_ID}-default"
  paths:
    - .pip-cache
    - .tox

variables: &variables
  GIT_SUBMODULE_STRATEGY: "recursive"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  SEMVER_REGEXP: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$'

before_script:
  - source $HOME/.bash_profile

.docker-base: &docker-base
  services:
    - docker:dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"
  after_script:
    - docker logout "$CI_REGISTRY"
  cache: {}
  variables:
    <<: *variables
    GIT_STRATEGY: none
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_CI_TAG: $CI_REGISTRY_IMAGE/ci:latest
    IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:latest

# Docker build

Build CI image:
  <<: *docker-base
  stage: build
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_CI_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_RELEASE_TAG" --cache-from "$IMAGE_CI_TAG" --tag "$IMAGE_CI_TAG" --build-arg INNOCONV_IMAGE="$CI_REGISTRY_IMAGE" -f Dockerfile.ci .
    - docker push "$IMAGE_CI_TAG"
  only:
    - master

Build image:
  <<: *docker-base
  stage: build
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_RELEASE_TAG" --tag "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_RELEASE_TAG"
    - docker push "$IMAGE_RELEASE_TAG"
  only:
    - master

# tox-based tests

Python 3.7 unit tests:
  stage: test
  script: tox -e py37-unit
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)/'

Python 3.7 integration tests:
  stage: test
  script: tox -e py37-integration

Python 3.6 unit tests:
  stage: test
  script: tox -e py36-unit

Python 3.6 integration tests:
  stage: test
  script: tox -e py36-integration

Python 3.5 unit tests:
  stage: test
  script: tox -e py35-unit

Python 3.5 integration tests:
  stage: test
  script: tox -e py35-integration

Python 3.4 unit tests:
  stage: test
  script: tox -e py34-unit

Python 3.4 integration tests:
  stage: test
  script: tox -e py34-integration

Linting:
  stage: test
  script: tox -e linters
  cache:
    <<: *cache
    policy: pull

Documentation:
  stage: test
  script: tox -e docs
  cache:
    <<: *cache
    policy: pull

# Docker release

Push to registries:
  <<: *docker-base
  stage: release
  script:
    - if echo "$CI_COMMIT_TAG" | grep -qvE "$SEMVER_REGEXP"; then echo "Not a semver tag. Happily skipping..."; exit 0; fi
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - echo "$DOCKER_HUB_PWD" | docker login --username "$DOCKER_HUB_USER" --password-stdin "$DOCKER_HUB_REGISTRY"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker logout "$DOCKER_HUB_REGISTRY"
  only:
    - tags

# PyPI version release

Upload to PyPI:
  stage: release
  script:
    - if echo "$CI_COMMIT_TAG" | grep -qvE "$SEMVER_REGEXP"; then echo "Not a semver tag. Happily skipping..."; exit 0; fi
    - tox -e release
  variables:
    <<: *variables
    TWINE_USERNAME: $PYPI_USERNAME
    TWINE_PASSWORD: $PYPI_PASSWORD
  only:
    - tags
